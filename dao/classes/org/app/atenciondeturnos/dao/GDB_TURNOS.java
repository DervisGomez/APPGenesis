package org.app.atenciondeturnos.dao;

import java.util.List;
import org.app.atenciondeturnos.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GDB__TURNOS.
 */
public class GDB_TURNOS {

    private Long id;
    private Long TURNCONS;
    private String TURNZONA;
    private String TURNSECT;
    private String TURNSEDE;
    private String TURNESTA;
    private String TURNUSCR;
    private String TURNFECR;
    private String Descargado;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GDB_TURNOSDao myDao;

    private List<TurnCome> comentario;
    private List<TurnPersTurn> turnPers;
    private List<TurnMateTurn> turnMate;
    private List<TurnFirm> firma;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GDB_TURNOS() {
    }

    public GDB_TURNOS(Long id) {
        this.id = id;
    }

    public GDB_TURNOS(Long id, Long TURNCONS, String TURNZONA, String TURNSECT, String TURNSEDE, String TURNESTA, String TURNUSCR, String TURNFECR, String Descargado) {
        this.id = id;
        this.TURNCONS = TURNCONS;
        this.TURNZONA = TURNZONA;
        this.TURNSECT = TURNSECT;
        this.TURNSEDE = TURNSEDE;
        this.TURNESTA = TURNESTA;
        this.TURNUSCR = TURNUSCR;
        this.TURNFECR = TURNFECR;
        this.Descargado = Descargado;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGDB_TURNOSDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getTURNCONS() {
        return TURNCONS;
    }

    public void setTURNCONS(Long TURNCONS) {
        this.TURNCONS = TURNCONS;
    }

    public String getTURNZONA() {
        return TURNZONA;
    }

    public void setTURNZONA(String TURNZONA) {
        this.TURNZONA = TURNZONA;
    }

    public String getTURNSECT() {
        return TURNSECT;
    }

    public void setTURNSECT(String TURNSECT) {
        this.TURNSECT = TURNSECT;
    }

    public String getTURNSEDE() {
        return TURNSEDE;
    }

    public void setTURNSEDE(String TURNSEDE) {
        this.TURNSEDE = TURNSEDE;
    }

    public String getTURNESTA() {
        return TURNESTA;
    }

    public void setTURNESTA(String TURNESTA) {
        this.TURNESTA = TURNESTA;
    }

    public String getTURNUSCR() {
        return TURNUSCR;
    }

    public void setTURNUSCR(String TURNUSCR) {
        this.TURNUSCR = TURNUSCR;
    }

    public String getTURNFECR() {
        return TURNFECR;
    }

    public void setTURNFECR(String TURNFECR) {
        this.TURNFECR = TURNFECR;
    }

    public String getDescargado() {
        return Descargado;
    }

    public void setDescargado(String Descargado) {
        this.Descargado = Descargado;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TurnCome> getComentario() {
        if (comentario == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TurnComeDao targetDao = daoSession.getTurnComeDao();
            List<TurnCome> comentarioNew = targetDao._queryGDB_TURNOS_Comentario(id);
            synchronized (this) {
                if(comentario == null) {
                    comentario = comentarioNew;
                }
            }
        }
        return comentario;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComentario() {
        comentario = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TurnPersTurn> getTurnPers() {
        if (turnPers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TurnPersTurnDao targetDao = daoSession.getTurnPersTurnDao();
            List<TurnPersTurn> turnPersNew = targetDao._queryGDB_TURNOS_TurnPers(id);
            synchronized (this) {
                if(turnPers == null) {
                    turnPers = turnPersNew;
                }
            }
        }
        return turnPers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTurnPers() {
        turnPers = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TurnMateTurn> getTurnMate() {
        if (turnMate == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TurnMateTurnDao targetDao = daoSession.getTurnMateTurnDao();
            List<TurnMateTurn> turnMateNew = targetDao._queryGDB_TURNOS_TurnMate(id);
            synchronized (this) {
                if(turnMate == null) {
                    turnMate = turnMateNew;
                }
            }
        }
        return turnMate;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTurnMate() {
        turnMate = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TurnFirm> getFirma() {
        if (firma == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TurnFirmDao targetDao = daoSession.getTurnFirmDao();
            List<TurnFirm> firmaNew = targetDao._queryGDB_TURNOS_Firma(id);
            synchronized (this) {
                if(firma == null) {
                    firma = firmaNew;
                }
            }
        }
        return firma;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFirma() {
        firma = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}

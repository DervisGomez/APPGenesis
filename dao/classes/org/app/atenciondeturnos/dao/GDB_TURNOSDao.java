package org.app.atenciondeturnos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.atenciondeturnos.dao.GDB_TURNOS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GDB__TURNOS.
*/
public class GDB_TURNOSDao extends AbstractDao<GDB_TURNOS, Long> {

    public static final String TABLENAME = "GDB__TURNOS";

    /**
     * Properties of entity GDB_TURNOS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TURNCONS = new Property(1, Long.class, "TURNCONS", false, "TURNCONS");
        public final static Property TURNZONA = new Property(2, String.class, "TURNZONA", false, "TURNZONA");
        public final static Property TURNSECT = new Property(3, String.class, "TURNSECT", false, "TURNSECT");
        public final static Property TURNSEDE = new Property(4, String.class, "TURNSEDE", false, "TURNSEDE");
        public final static Property TURNESTA = new Property(5, String.class, "TURNESTA", false, "TURNESTA");
        public final static Property TURNUSCR = new Property(6, String.class, "TURNUSCR", false, "TURNUSCR");
        public final static Property TURNFECR = new Property(7, String.class, "TURNFECR", false, "TURNFECR");
        public final static Property Descargado = new Property(8, String.class, "Descargado", false, "DESCARGADO");
    };

    private DaoSession daoSession;


    public GDB_TURNOSDao(DaoConfig config) {
        super(config);
    }
    
    public GDB_TURNOSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GDB__TURNOS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TURNCONS' INTEGER," + // 1: TURNCONS
                "'TURNZONA' TEXT," + // 2: TURNZONA
                "'TURNSECT' TEXT," + // 3: TURNSECT
                "'TURNSEDE' TEXT," + // 4: TURNSEDE
                "'TURNESTA' TEXT," + // 5: TURNESTA
                "'TURNUSCR' TEXT," + // 6: TURNUSCR
                "'TURNFECR' TEXT," + // 7: TURNFECR
                "'DESCARGADO' TEXT);"); // 8: Descargado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GDB__TURNOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GDB_TURNOS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long TURNCONS = entity.getTURNCONS();
        if (TURNCONS != null) {
            stmt.bindLong(2, TURNCONS);
        }
 
        String TURNZONA = entity.getTURNZONA();
        if (TURNZONA != null) {
            stmt.bindString(3, TURNZONA);
        }
 
        String TURNSECT = entity.getTURNSECT();
        if (TURNSECT != null) {
            stmt.bindString(4, TURNSECT);
        }
 
        String TURNSEDE = entity.getTURNSEDE();
        if (TURNSEDE != null) {
            stmt.bindString(5, TURNSEDE);
        }
 
        String TURNESTA = entity.getTURNESTA();
        if (TURNESTA != null) {
            stmt.bindString(6, TURNESTA);
        }
 
        String TURNUSCR = entity.getTURNUSCR();
        if (TURNUSCR != null) {
            stmt.bindString(7, TURNUSCR);
        }
 
        String TURNFECR = entity.getTURNFECR();
        if (TURNFECR != null) {
            stmt.bindString(8, TURNFECR);
        }
 
        String Descargado = entity.getDescargado();
        if (Descargado != null) {
            stmt.bindString(9, Descargado);
        }
    }

    @Override
    protected void attachEntity(GDB_TURNOS entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GDB_TURNOS readEntity(Cursor cursor, int offset) {
        GDB_TURNOS entity = new GDB_TURNOS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // TURNCONS
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TURNZONA
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TURNSECT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TURNSEDE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TURNESTA
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TURNUSCR
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TURNFECR
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // Descargado
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GDB_TURNOS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTURNCONS(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTURNZONA(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTURNSECT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTURNSEDE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTURNESTA(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTURNUSCR(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTURNFECR(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDescargado(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GDB_TURNOS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GDB_TURNOS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

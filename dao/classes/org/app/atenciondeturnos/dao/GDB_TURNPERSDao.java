package org.app.atenciondeturnos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.atenciondeturnos.dao.GDB_TURNPERS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GDB__TURNPERS.
*/
public class GDB_TURNPERSDao extends AbstractDao<GDB_TURNPERS, Long> {

    public static final String TABLENAME = "GDB__TURNPERS";

    /**
     * Properties of entity GDB_TURNPERS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TUPECONS = new Property(1, Long.class, "TUPECONS", false, "TUPECONS");
        public final static Property TUPETURN = new Property(2, Long.class, "TUPETURN", false, "TUPETURN");
        public final static Property TUPEPERS = new Property(3, String.class, "TUPEPERS", false, "TUPEPERS");
        public final static Property TUPEFEIN = new Property(4, String.class, "TUPEFEIN", false, "TUPEFEIN");
        public final static Property TUPEFEFI = new Property(5, String.class, "TUPEFEFI", false, "TUPEFEFI");
        public final static Property TUPEOBSE = new Property(6, String.class, "TUPEOBSE", false, "TUPEOBSE");
        public final static Property TUPEINIC = new Property(7, String.class, "TUPEINIC", false, "TUPEINIC");
        public final static Property TUPEFINA = new Property(8, String.class, "TUPEFINA", false, "TUPEFINA");
        public final static Property TUPEESTA = new Property(9, String.class, "TUPEESTA", false, "TUPEESTA");
        public final static Property TUPEUSCR = new Property(10, String.class, "TUPEUSCR", false, "TUPEUSCR");
        public final static Property TUPEFECR = new Property(11, String.class, "TUPEFECR", false, "TUPEFECR");
    };


    public GDB_TURNPERSDao(DaoConfig config) {
        super(config);
    }
    
    public GDB_TURNPERSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GDB__TURNPERS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TUPECONS' INTEGER," + // 1: TUPECONS
                "'TUPETURN' INTEGER," + // 2: TUPETURN
                "'TUPEPERS' TEXT," + // 3: TUPEPERS
                "'TUPEFEIN' TEXT," + // 4: TUPEFEIN
                "'TUPEFEFI' TEXT," + // 5: TUPEFEFI
                "'TUPEOBSE' TEXT," + // 6: TUPEOBSE
                "'TUPEINIC' TEXT," + // 7: TUPEINIC
                "'TUPEFINA' TEXT," + // 8: TUPEFINA
                "'TUPEESTA' TEXT," + // 9: TUPEESTA
                "'TUPEUSCR' TEXT," + // 10: TUPEUSCR
                "'TUPEFECR' TEXT);"); // 11: TUPEFECR
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GDB__TURNPERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GDB_TURNPERS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long TUPECONS = entity.getTUPECONS();
        if (TUPECONS != null) {
            stmt.bindLong(2, TUPECONS);
        }
 
        Long TUPETURN = entity.getTUPETURN();
        if (TUPETURN != null) {
            stmt.bindLong(3, TUPETURN);
        }
 
        String TUPEPERS = entity.getTUPEPERS();
        if (TUPEPERS != null) {
            stmt.bindString(4, TUPEPERS);
        }
 
        String TUPEFEIN = entity.getTUPEFEIN();
        if (TUPEFEIN != null) {
            stmt.bindString(5, TUPEFEIN);
        }
 
        String TUPEFEFI = entity.getTUPEFEFI();
        if (TUPEFEFI != null) {
            stmt.bindString(6, TUPEFEFI);
        }
 
        String TUPEOBSE = entity.getTUPEOBSE();
        if (TUPEOBSE != null) {
            stmt.bindString(7, TUPEOBSE);
        }
 
        String TUPEINIC = entity.getTUPEINIC();
        if (TUPEINIC != null) {
            stmt.bindString(8, TUPEINIC);
        }
 
        String TUPEFINA = entity.getTUPEFINA();
        if (TUPEFINA != null) {
            stmt.bindString(9, TUPEFINA);
        }
 
        String TUPEESTA = entity.getTUPEESTA();
        if (TUPEESTA != null) {
            stmt.bindString(10, TUPEESTA);
        }
 
        String TUPEUSCR = entity.getTUPEUSCR();
        if (TUPEUSCR != null) {
            stmt.bindString(11, TUPEUSCR);
        }
 
        String TUPEFECR = entity.getTUPEFECR();
        if (TUPEFECR != null) {
            stmt.bindString(12, TUPEFECR);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GDB_TURNPERS readEntity(Cursor cursor, int offset) {
        GDB_TURNPERS entity = new GDB_TURNPERS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // TUPECONS
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // TUPETURN
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TUPEPERS
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TUPEFEIN
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TUPEFEFI
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TUPEOBSE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // TUPEINIC
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // TUPEFINA
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TUPEESTA
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // TUPEUSCR
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // TUPEFECR
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GDB_TURNPERS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTUPECONS(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTUPETURN(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTUPEPERS(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTUPEFEIN(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTUPEFEFI(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTUPEOBSE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTUPEINIC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTUPEFINA(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTUPEESTA(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTUPEUSCR(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTUPEFECR(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GDB_TURNPERS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GDB_TURNPERS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

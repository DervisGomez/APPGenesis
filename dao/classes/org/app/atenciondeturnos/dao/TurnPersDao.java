package org.app.atenciondeturnos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.atenciondeturnos.dao.TurnPers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TURN_PERS.
*/
public class TurnPersDao extends AbstractDao<TurnPers, Long> {

    public static final String TABLENAME = "TURN_PERS";

    /**
     * Properties of entity TurnPers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Perscons = new Property(1, Integer.class, "perscons", false, "PERSCONS");
        public final static Property Persaror = new Property(2, Integer.class, "persaror", false, "PERSAROR");
        public final static Property Persopid = new Property(3, Integer.class, "persopid", false, "PERSOPID");
        public final static Property Perstipo = new Property(4, Integer.class, "perstipo", false, "PERSTIPO");
        public final static Property Persnomb = new Property(5, String.class, "persnomb", false, "PERSNOMB");
        public final static Property Perstiid = new Property(6, Integer.class, "perstiid", false, "PERSTIID");
        public final static Property Persiden = new Property(7, String.class, "persiden", false, "PERSIDEN");
        public final static Property Persusop = new Property(8, String.class, "persusop", false, "PERSUSOP");
        public final static Property Persusua = new Property(9, String.class, "persusua", false, "PERSUSUA");
        public final static Property Persesta = new Property(10, String.class, "persesta", false, "PERSESTA");
        public final static Property Persuscr = new Property(11, String.class, "persuscr", false, "PERSUSCR");
        public final static Property Persfecr = new Property(12, String.class, "persfecr", false, "PERSFECR");
        public final static Property Unoppers = new Property(13, String.class, "unoppers", false, "UNOPPERS");
        public final static Property Peuopers = new Property(14, String.class, "peuopers", false, "PEUOPERS");
    };

    private DaoSession daoSession;


    public TurnPersDao(DaoConfig config) {
        super(config);
    }
    
    public TurnPersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TURN_PERS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PERSCONS' INTEGER," + // 1: perscons
                "'PERSAROR' INTEGER," + // 2: persaror
                "'PERSOPID' INTEGER," + // 3: persopid
                "'PERSTIPO' INTEGER," + // 4: perstipo
                "'PERSNOMB' TEXT," + // 5: persnomb
                "'PERSTIID' INTEGER," + // 6: perstiid
                "'PERSIDEN' TEXT," + // 7: persiden
                "'PERSUSOP' TEXT," + // 8: persusop
                "'PERSUSUA' TEXT," + // 9: persusua
                "'PERSESTA' TEXT," + // 10: persesta
                "'PERSUSCR' TEXT," + // 11: persuscr
                "'PERSFECR' TEXT," + // 12: persfecr
                "'UNOPPERS' TEXT," + // 13: unoppers
                "'PEUOPERS' TEXT);"); // 14: peuopers
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TURN_PERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TurnPers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer perscons = entity.getPerscons();
        if (perscons != null) {
            stmt.bindLong(2, perscons);
        }
 
        Integer persaror = entity.getPersaror();
        if (persaror != null) {
            stmt.bindLong(3, persaror);
        }
 
        Integer persopid = entity.getPersopid();
        if (persopid != null) {
            stmt.bindLong(4, persopid);
        }
 
        Integer perstipo = entity.getPerstipo();
        if (perstipo != null) {
            stmt.bindLong(5, perstipo);
        }
 
        String persnomb = entity.getPersnomb();
        if (persnomb != null) {
            stmt.bindString(6, persnomb);
        }
 
        Integer perstiid = entity.getPerstiid();
        if (perstiid != null) {
            stmt.bindLong(7, perstiid);
        }
 
        String persiden = entity.getPersiden();
        if (persiden != null) {
            stmt.bindString(8, persiden);
        }
 
        String persusop = entity.getPersusop();
        if (persusop != null) {
            stmt.bindString(9, persusop);
        }
 
        String persusua = entity.getPersusua();
        if (persusua != null) {
            stmt.bindString(10, persusua);
        }
 
        String persesta = entity.getPersesta();
        if (persesta != null) {
            stmt.bindString(11, persesta);
        }
 
        String persuscr = entity.getPersuscr();
        if (persuscr != null) {
            stmt.bindString(12, persuscr);
        }
 
        String persfecr = entity.getPersfecr();
        if (persfecr != null) {
            stmt.bindString(13, persfecr);
        }
 
        String unoppers = entity.getUnoppers();
        if (unoppers != null) {
            stmt.bindString(14, unoppers);
        }
 
        String peuopers = entity.getPeuopers();
        if (peuopers != null) {
            stmt.bindString(15, peuopers);
        }
    }

    @Override
    protected void attachEntity(TurnPers entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TurnPers readEntity(Cursor cursor, int offset) {
        TurnPers entity = new TurnPers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // perscons
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // persaror
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // persopid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // perstipo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // persnomb
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // perstiid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // persiden
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // persusop
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // persusua
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // persesta
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // persuscr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // persfecr
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // unoppers
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // peuopers
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TurnPers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPerscons(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPersaror(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPersopid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPerstipo(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPersnomb(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPerstiid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPersiden(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPersusop(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPersusua(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPersesta(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPersuscr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPersfecr(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnoppers(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPeuopers(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TurnPers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TurnPers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

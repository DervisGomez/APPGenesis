package org.app.atenciondeturnos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.atenciondeturnos.dao.GMA_PKIDTurno;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GMA__PKIDTURNO.
*/
public class GMA_PKIDTurnoDao extends AbstractDao<GMA_PKIDTurno, Long> {

    public static final String TABLENAME = "GMA__PKIDTURNO";

    /**
     * Properties of entity GMA_PKIDTurno.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tabla = new Property(1, String.class, "Tabla", false, "TABLA");
        public final static Property Cantidad = new Property(2, Integer.class, "cantidad", false, "CANTIDAD");
    };


    public GMA_PKIDTurnoDao(DaoConfig config) {
        super(config);
    }
    
    public GMA_PKIDTurnoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GMA__PKIDTURNO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TABLA' TEXT," + // 1: Tabla
                "'CANTIDAD' INTEGER);"); // 2: cantidad
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GMA__PKIDTURNO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GMA_PKIDTurno entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Tabla = entity.getTabla();
        if (Tabla != null) {
            stmt.bindString(2, Tabla);
        }
 
        Integer cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(3, cantidad);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GMA_PKIDTurno readEntity(Cursor cursor, int offset) {
        GMA_PKIDTurno entity = new GMA_PKIDTurno( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Tabla
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // cantidad
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GMA_PKIDTurno entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTabla(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCantidad(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GMA_PKIDTurno entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GMA_PKIDTurno entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

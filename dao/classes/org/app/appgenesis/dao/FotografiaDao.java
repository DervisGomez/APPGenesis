package org.app.appgenesis.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.appgenesis.dao.Fotografia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOTOGRAFIA.
*/
public class FotografiaDao extends AbstractDao<Fotografia, Long> {

    public static final String TABLENAME = "FOTOGRAFIA";

    /**
     * Properties of entity Fotografia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fecha = new Property(1, Long.class, "Fecha", false, "FECHA");
        public final static Property Descripcion = new Property(2, String.class, "Descripcion", false, "DESCRIPCION");
        public final static Property Foto = new Property(3, String.class, "Foto", false, "FOTO");
        public final static Property IdOrden = new Property(4, Long.class, "IdOrden", false, "ID_ORDEN");
    };

    private Query<Fotografia> gro_orden_FotografiaQuery;

    public FotografiaDao(DaoConfig config) {
        super(config);
    }
    
    public FotografiaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FOTOGRAFIA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FECHA' INTEGER," + // 1: Fecha
                "'DESCRIPCION' TEXT," + // 2: Descripcion
                "'FOTO' TEXT," + // 3: Foto
                "'ID_ORDEN' INTEGER);"); // 4: IdOrden
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FOTOGRAFIA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Fotografia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long Fecha = entity.getFecha();
        if (Fecha != null) {
            stmt.bindLong(2, Fecha);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(3, Descripcion);
        }
 
        String Foto = entity.getFoto();
        if (Foto != null) {
            stmt.bindString(4, Foto);
        }
 
        Long IdOrden = entity.getIdOrden();
        if (IdOrden != null) {
            stmt.bindLong(5, IdOrden);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Fotografia readEntity(Cursor cursor, int offset) {
        Fotografia entity = new Fotografia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // Fecha
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Descripcion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Foto
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // IdOrden
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Fotografia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFecha(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdOrden(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Fotografia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Fotografia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fotografia" to-many relationship of Gro_orden. */
    public List<Fotografia> _queryGro_orden_Fotografia(Long IdOrden) {
        synchronized (this) {
            if (gro_orden_FotografiaQuery == null) {
                QueryBuilder<Fotografia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdOrden.eq(null));
                gro_orden_FotografiaQuery = queryBuilder.build();
            }
        }
        Query<Fotografia> query = gro_orden_FotografiaQuery.forCurrentThread();
        query.setParameter(0, IdOrden);
        return query.list();
    }

}

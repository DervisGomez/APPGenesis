package org.app.appgenesis.dao;

import java.util.List;
import org.app.appgenesis.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MATERIAL.
 */
public class Material {

    private Long id;
    private Integer matecons;
    private Integer matecodi;
    private String matedesc;
    private Integer mateclas;
    private Integer mateunme;
    private String mategara;
    private String mateexis;
    private String matecost;
    private Integer mateesta;
    private String mateuscr;
    private String matefecr;
    private String mattmate;
    private Long idOrden;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MaterialDao myDao;

    private List<OrdeMate> ordeMate;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Material() {
    }

    public Material(Long id) {
        this.id = id;
    }

    public Material(Long id, Integer matecons, Integer matecodi, String matedesc, Integer mateclas, Integer mateunme, String mategara, String mateexis, String matecost, Integer mateesta, String mateuscr, String matefecr, String mattmate, Long idOrden) {
        this.id = id;
        this.matecons = matecons;
        this.matecodi = matecodi;
        this.matedesc = matedesc;
        this.mateclas = mateclas;
        this.mateunme = mateunme;
        this.mategara = mategara;
        this.mateexis = mateexis;
        this.matecost = matecost;
        this.mateesta = mateesta;
        this.mateuscr = mateuscr;
        this.matefecr = matefecr;
        this.mattmate = mattmate;
        this.idOrden = idOrden;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMaterialDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getMatecons() {
        return matecons;
    }

    public void setMatecons(Integer matecons) {
        this.matecons = matecons;
    }

    public Integer getMatecodi() {
        return matecodi;
    }

    public void setMatecodi(Integer matecodi) {
        this.matecodi = matecodi;
    }

    public String getMatedesc() {
        return matedesc;
    }

    public void setMatedesc(String matedesc) {
        this.matedesc = matedesc;
    }

    public Integer getMateclas() {
        return mateclas;
    }

    public void setMateclas(Integer mateclas) {
        this.mateclas = mateclas;
    }

    public Integer getMateunme() {
        return mateunme;
    }

    public void setMateunme(Integer mateunme) {
        this.mateunme = mateunme;
    }

    public String getMategara() {
        return mategara;
    }

    public void setMategara(String mategara) {
        this.mategara = mategara;
    }

    public String getMateexis() {
        return mateexis;
    }

    public void setMateexis(String mateexis) {
        this.mateexis = mateexis;
    }

    public String getMatecost() {
        return matecost;
    }

    public void setMatecost(String matecost) {
        this.matecost = matecost;
    }

    public Integer getMateesta() {
        return mateesta;
    }

    public void setMateesta(Integer mateesta) {
        this.mateesta = mateesta;
    }

    public String getMateuscr() {
        return mateuscr;
    }

    public void setMateuscr(String mateuscr) {
        this.mateuscr = mateuscr;
    }

    public String getMatefecr() {
        return matefecr;
    }

    public void setMatefecr(String matefecr) {
        this.matefecr = matefecr;
    }

    public String getMattmate() {
        return mattmate;
    }

    public void setMattmate(String mattmate) {
        this.mattmate = mattmate;
    }

    public Long getIdOrden() {
        return idOrden;
    }

    public void setIdOrden(Long idOrden) {
        this.idOrden = idOrden;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OrdeMate> getOrdeMate() {
        if (ordeMate == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrdeMateDao targetDao = daoSession.getOrdeMateDao();
            List<OrdeMate> ordeMateNew = targetDao._queryMaterial_OrdeMate(id);
            synchronized (this) {
                if(ordeMate == null) {
                    ordeMate = ordeMateNew;
                }
            }
        }
        return ordeMate;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrdeMate() {
        ordeMate = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}

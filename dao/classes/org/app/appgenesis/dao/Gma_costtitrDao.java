package org.app.appgenesis.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.appgenesis.dao.Gma_costtitr;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GMA_COSTTITR.
*/
public class Gma_costtitrDao extends AbstractDao<Gma_costtitr, Long> {

    public static final String TABLENAME = "GMA_COSTTITR";

    /**
     * Properties of entity Gma_costtitr.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Csttcons = new Property(1, Long.class, "csttcons", false, "CSTTCONS");
        public final static Property Cstttitr = new Property(2, Long.class, "cstttitr", false, "CSTTTITR");
        public final static Property Csttnomb = new Property(3, String.class, "csttnomb", false, "CSTTNOMB");
        public final static Property Csttdesc = new Property(4, String.class, "csttdesc", false, "CSTTDESC");
        public final static Property Csttvalo = new Property(5, String.class, "csttvalo", false, "CSTTVALO");
        public final static Property Csttfein = new Property(6, String.class, "csttfein", false, "CSTTFEIN");
        public final static Property Csttfefi = new Property(7, String.class, "csttfefi", false, "CSTTFEFI");
        public final static Property Csttesta = new Property(8, Long.class, "csttesta", false, "CSTTESTA");
        public final static Property Csttuscr = new Property(9, String.class, "csttuscr", false, "CSTTUSCR");
        public final static Property Csttfecr = new Property(10, String.class, "csttfecr", false, "CSTTFECR");
    };


    public Gma_costtitrDao(DaoConfig config) {
        super(config);
    }
    
    public Gma_costtitrDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GMA_COSTTITR' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CSTTCONS' INTEGER," + // 1: csttcons
                "'CSTTTITR' INTEGER," + // 2: cstttitr
                "'CSTTNOMB' TEXT," + // 3: csttnomb
                "'CSTTDESC' TEXT," + // 4: csttdesc
                "'CSTTVALO' TEXT," + // 5: csttvalo
                "'CSTTFEIN' TEXT," + // 6: csttfein
                "'CSTTFEFI' TEXT," + // 7: csttfefi
                "'CSTTESTA' INTEGER," + // 8: csttesta
                "'CSTTUSCR' TEXT," + // 9: csttuscr
                "'CSTTFECR' TEXT);"); // 10: csttfecr
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GMA_COSTTITR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gma_costtitr entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long csttcons = entity.getCsttcons();
        if (csttcons != null) {
            stmt.bindLong(2, csttcons);
        }
 
        Long cstttitr = entity.getCstttitr();
        if (cstttitr != null) {
            stmt.bindLong(3, cstttitr);
        }
 
        String csttnomb = entity.getCsttnomb();
        if (csttnomb != null) {
            stmt.bindString(4, csttnomb);
        }
 
        String csttdesc = entity.getCsttdesc();
        if (csttdesc != null) {
            stmt.bindString(5, csttdesc);
        }
 
        String csttvalo = entity.getCsttvalo();
        if (csttvalo != null) {
            stmt.bindString(6, csttvalo);
        }
 
        String csttfein = entity.getCsttfein();
        if (csttfein != null) {
            stmt.bindString(7, csttfein);
        }
 
        String csttfefi = entity.getCsttfefi();
        if (csttfefi != null) {
            stmt.bindString(8, csttfefi);
        }
 
        Long csttesta = entity.getCsttesta();
        if (csttesta != null) {
            stmt.bindLong(9, csttesta);
        }
 
        String csttuscr = entity.getCsttuscr();
        if (csttuscr != null) {
            stmt.bindString(10, csttuscr);
        }
 
        String csttfecr = entity.getCsttfecr();
        if (csttfecr != null) {
            stmt.bindString(11, csttfecr);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gma_costtitr readEntity(Cursor cursor, int offset) {
        Gma_costtitr entity = new Gma_costtitr( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // csttcons
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // cstttitr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // csttnomb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // csttdesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // csttvalo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // csttfein
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // csttfefi
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // csttesta
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // csttuscr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // csttfecr
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gma_costtitr entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCsttcons(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCstttitr(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCsttnomb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCsttdesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCsttvalo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCsttfein(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCsttfefi(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCsttesta(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCsttuscr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCsttfecr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gma_costtitr entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gma_costtitr entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

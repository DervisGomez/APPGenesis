package org.app.appgenesis.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.appgenesis.dao.Gro_orden;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GRO_ORDEN.
*/
public class Gro_ordenDao extends AbstractDao<Gro_orden, Long> {

    public static final String TABLENAME = "GRO_ORDEN";

    /**
     * Properties of entity Gro_orden.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ORDECONS = new Property(1, Integer.class, "ORDECONS", false, "ORDECONS");
        public final static Property ORDEORAM = new Property(2, String.class, "ORDEORAM", false, "ORDEORAM");
        public final static Property ORDECONT = new Property(3, String.class, "ORDECONT", false, "ORDECONT");
        public final static Property ORDECAUS = new Property(4, String.class, "ORDECAUS", false, "ORDECAUS");
        public final static Property ORDETIDO = new Property(5, String.class, "ORDETIDO", false, "ORDETIDO");
        public final static Property ORDENUDO = new Property(6, String.class, "ORDENUDO", false, "ORDENUDO");
        public final static Property ORDEPADR = new Property(7, String.class, "ORDEPADR", false, "ORDEPADR");
        public final static Property ORDEFIEJ = new Property(8, String.class, "ORDEFIEJ", false, "ORDEFIEJ");
        public final static Property ORDEFFEJ = new Property(9, String.class, "ORDEFFEJ", false, "ORDEFFEJ");
        public final static Property ORDEFEEJ = new Property(10, String.class, "ORDEFEEJ", false, "ORDEFEEJ");
        public final static Property ORDEFEAS = new Property(11, String.class, "ORDEFEAS", false, "ORDEFEAS");
        public final static Property ORDEFELE = new Property(12, String.class, "ORDEFELE", false, "ORDEFELE");
        public final static Property ORDEVALU = new Property(13, String.class, "ORDEVALU", false, "ORDEVALU");
        public final static Property ORDEUNOP = new Property(14, String.class, "ORDEUNOP", false, "ORDEUNOP");
        public final static Property ORDETITR = new Property(15, String.class, "ORDETITR", false, "ORDETITR");
        public final static Property ORDECALE = new Property(16, String.class, "ORDECALE", false, "ORDECALE");
        public final static Property ORDEMOLE = new Property(17, String.class, "ORDEMOLE", false, "ORDEMOLE");
        public final static Property ORDEOBSE = new Property(18, String.class, "ORDEOBSE", false, "ORDEOBSE");
        public final static Property ORDEEFEC = new Property(19, String.class, "ORDEEFEC", false, "ORDEEFEC");
        public final static Property ORDETERM = new Property(20, String.class, "ORDETERM", false, "ORDETERM");
        public final static Property ORDELATI = new Property(21, String.class, "ORDELATI", false, "ORDELATI");
        public final static Property ORDELONG = new Property(22, String.class, "ORDELONG", false, "ORDELONG");
        public final static Property ORDEALTI = new Property(23, String.class, "ORDEALTI", false, "ORDEALTI");
        public final static Property ORDEESTA = new Property(24, String.class, "ORDEESTA", false, "ORDEESTA");
        public final static Property ORDEUSCR = new Property(25, String.class, "ORDEUSCR", false, "ORDEUSCR");
        public final static Property ORDEFECR = new Property(26, String.class, "ORDEFECR", false, "ORDEFECR");
        public final static Property UNOPNOMB = new Property(27, String.class, "UNOPNOMB", false, "UNOPNOMB");
        public final static Property TITRDESC = new Property(28, String.class, "TITRDESC", false, "TITRDESC");
        public final static Property ORESESTA = new Property(29, String.class, "ORESESTA", false, "ORESESTA");
        public final static Property TIPODOCU = new Property(30, String.class, "TIPODOCU", false, "TIPODOCU");
        public final static Property CAUSLEGA = new Property(31, String.class, "CAUSLEGA", false, "CAUSLEGA");
        public final static Property MOTILEGA = new Property(32, String.class, "MOTILEGA", false, "MOTILEGA");
        public final static Property CONTCODI = new Property(33, String.class, "CONTCODI", false, "CONTCODI");
        public final static Property CONTNOMB = new Property(34, String.class, "CONTNOMB", false, "CONTNOMB");
        public final static Property CONCCICL = new Property(35, String.class, "CONCCICL", false, "CONCCICL");
        public final static Property CONTDIRE = new Property(36, String.class, "CONTDIRE", false, "CONTDIRE");
        public final static Property CONTBARR = new Property(37, String.class, "CONTBARR", false, "CONTBARR");
        public final static Property CONTTEFI = new Property(38, String.class, "CONTTEFI", false, "CONTTEFI");
        public final static Property CONTTECE = new Property(39, String.class, "CONTTECE", false, "CONTTECE");
        public final static Property CONTRULE = new Property(40, String.class, "CONTRULE", false, "CONTRULE");
        public final static Property VALOBARR = new Property(41, String.class, "VALOBARR", false, "VALOBARR");
        public final static Property DANOPURE = new Property(42, String.class, "DANOPURE", false, "DANOPURE");
        public final static Property DANOLATI = new Property(43, String.class, "DANOLATI", false, "DANOLATI");
        public final static Property DANOLONG = new Property(44, String.class, "DANOLONG", false, "DANOLONG");
        public final static Property DANOALTI = new Property(45, String.class, "DANOALTI", false, "DANOALTI");
        public final static Property CAUSDESC = new Property(46, String.class, "CAUSDESC", false, "CAUSDESC");
        public final static Property ESTADO = new Property(47, String.class, "ESTADO", false, "ESTADO");
        public final static Property Descargado = new Property(48, String.class, "Descargado", false, "DESCARGADO");
    };

    private DaoSession daoSession;


    public Gro_ordenDao(DaoConfig config) {
        super(config);
    }
    
    public Gro_ordenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GRO_ORDEN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ORDECONS' INTEGER," + // 1: ORDECONS
                "'ORDEORAM' TEXT," + // 2: ORDEORAM
                "'ORDECONT' TEXT," + // 3: ORDECONT
                "'ORDECAUS' TEXT," + // 4: ORDECAUS
                "'ORDETIDO' TEXT," + // 5: ORDETIDO
                "'ORDENUDO' TEXT," + // 6: ORDENUDO
                "'ORDEPADR' TEXT," + // 7: ORDEPADR
                "'ORDEFIEJ' TEXT," + // 8: ORDEFIEJ
                "'ORDEFFEJ' TEXT," + // 9: ORDEFFEJ
                "'ORDEFEEJ' TEXT," + // 10: ORDEFEEJ
                "'ORDEFEAS' TEXT," + // 11: ORDEFEAS
                "'ORDEFELE' TEXT," + // 12: ORDEFELE
                "'ORDEVALU' TEXT," + // 13: ORDEVALU
                "'ORDEUNOP' TEXT," + // 14: ORDEUNOP
                "'ORDETITR' TEXT," + // 15: ORDETITR
                "'ORDECALE' TEXT," + // 16: ORDECALE
                "'ORDEMOLE' TEXT," + // 17: ORDEMOLE
                "'ORDEOBSE' TEXT," + // 18: ORDEOBSE
                "'ORDEEFEC' TEXT," + // 19: ORDEEFEC
                "'ORDETERM' TEXT," + // 20: ORDETERM
                "'ORDELATI' TEXT," + // 21: ORDELATI
                "'ORDELONG' TEXT," + // 22: ORDELONG
                "'ORDEALTI' TEXT," + // 23: ORDEALTI
                "'ORDEESTA' TEXT," + // 24: ORDEESTA
                "'ORDEUSCR' TEXT," + // 25: ORDEUSCR
                "'ORDEFECR' TEXT," + // 26: ORDEFECR
                "'UNOPNOMB' TEXT," + // 27: UNOPNOMB
                "'TITRDESC' TEXT," + // 28: TITRDESC
                "'ORESESTA' TEXT," + // 29: ORESESTA
                "'TIPODOCU' TEXT," + // 30: TIPODOCU
                "'CAUSLEGA' TEXT," + // 31: CAUSLEGA
                "'MOTILEGA' TEXT," + // 32: MOTILEGA
                "'CONTCODI' TEXT," + // 33: CONTCODI
                "'CONTNOMB' TEXT," + // 34: CONTNOMB
                "'CONCCICL' TEXT," + // 35: CONCCICL
                "'CONTDIRE' TEXT," + // 36: CONTDIRE
                "'CONTBARR' TEXT," + // 37: CONTBARR
                "'CONTTEFI' TEXT," + // 38: CONTTEFI
                "'CONTTECE' TEXT," + // 39: CONTTECE
                "'CONTRULE' TEXT," + // 40: CONTRULE
                "'VALOBARR' TEXT," + // 41: VALOBARR
                "'DANOPURE' TEXT," + // 42: DANOPURE
                "'DANOLATI' TEXT," + // 43: DANOLATI
                "'DANOLONG' TEXT," + // 44: DANOLONG
                "'DANOALTI' TEXT," + // 45: DANOALTI
                "'CAUSDESC' TEXT," + // 46: CAUSDESC
                "'ESTADO' TEXT," + // 47: ESTADO
                "'DESCARGADO' TEXT);"); // 48: Descargado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GRO_ORDEN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gro_orden entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ORDECONS = entity.getORDECONS();
        if (ORDECONS != null) {
            stmt.bindLong(2, ORDECONS);
        }
 
        String ORDEORAM = entity.getORDEORAM();
        if (ORDEORAM != null) {
            stmt.bindString(3, ORDEORAM);
        }
 
        String ORDECONT = entity.getORDECONT();
        if (ORDECONT != null) {
            stmt.bindString(4, ORDECONT);
        }
 
        String ORDECAUS = entity.getORDECAUS();
        if (ORDECAUS != null) {
            stmt.bindString(5, ORDECAUS);
        }
 
        String ORDETIDO = entity.getORDETIDO();
        if (ORDETIDO != null) {
            stmt.bindString(6, ORDETIDO);
        }
 
        String ORDENUDO = entity.getORDENUDO();
        if (ORDENUDO != null) {
            stmt.bindString(7, ORDENUDO);
        }
 
        String ORDEPADR = entity.getORDEPADR();
        if (ORDEPADR != null) {
            stmt.bindString(8, ORDEPADR);
        }
 
        String ORDEFIEJ = entity.getORDEFIEJ();
        if (ORDEFIEJ != null) {
            stmt.bindString(9, ORDEFIEJ);
        }
 
        String ORDEFFEJ = entity.getORDEFFEJ();
        if (ORDEFFEJ != null) {
            stmt.bindString(10, ORDEFFEJ);
        }
 
        String ORDEFEEJ = entity.getORDEFEEJ();
        if (ORDEFEEJ != null) {
            stmt.bindString(11, ORDEFEEJ);
        }
 
        String ORDEFEAS = entity.getORDEFEAS();
        if (ORDEFEAS != null) {
            stmt.bindString(12, ORDEFEAS);
        }
 
        String ORDEFELE = entity.getORDEFELE();
        if (ORDEFELE != null) {
            stmt.bindString(13, ORDEFELE);
        }
 
        String ORDEVALU = entity.getORDEVALU();
        if (ORDEVALU != null) {
            stmt.bindString(14, ORDEVALU);
        }
 
        String ORDEUNOP = entity.getORDEUNOP();
        if (ORDEUNOP != null) {
            stmt.bindString(15, ORDEUNOP);
        }
 
        String ORDETITR = entity.getORDETITR();
        if (ORDETITR != null) {
            stmt.bindString(16, ORDETITR);
        }
 
        String ORDECALE = entity.getORDECALE();
        if (ORDECALE != null) {
            stmt.bindString(17, ORDECALE);
        }
 
        String ORDEMOLE = entity.getORDEMOLE();
        if (ORDEMOLE != null) {
            stmt.bindString(18, ORDEMOLE);
        }
 
        String ORDEOBSE = entity.getORDEOBSE();
        if (ORDEOBSE != null) {
            stmt.bindString(19, ORDEOBSE);
        }
 
        String ORDEEFEC = entity.getORDEEFEC();
        if (ORDEEFEC != null) {
            stmt.bindString(20, ORDEEFEC);
        }
 
        String ORDETERM = entity.getORDETERM();
        if (ORDETERM != null) {
            stmt.bindString(21, ORDETERM);
        }
 
        String ORDELATI = entity.getORDELATI();
        if (ORDELATI != null) {
            stmt.bindString(22, ORDELATI);
        }
 
        String ORDELONG = entity.getORDELONG();
        if (ORDELONG != null) {
            stmt.bindString(23, ORDELONG);
        }
 
        String ORDEALTI = entity.getORDEALTI();
        if (ORDEALTI != null) {
            stmt.bindString(24, ORDEALTI);
        }
 
        String ORDEESTA = entity.getORDEESTA();
        if (ORDEESTA != null) {
            stmt.bindString(25, ORDEESTA);
        }
 
        String ORDEUSCR = entity.getORDEUSCR();
        if (ORDEUSCR != null) {
            stmt.bindString(26, ORDEUSCR);
        }
 
        String ORDEFECR = entity.getORDEFECR();
        if (ORDEFECR != null) {
            stmt.bindString(27, ORDEFECR);
        }
 
        String UNOPNOMB = entity.getUNOPNOMB();
        if (UNOPNOMB != null) {
            stmt.bindString(28, UNOPNOMB);
        }
 
        String TITRDESC = entity.getTITRDESC();
        if (TITRDESC != null) {
            stmt.bindString(29, TITRDESC);
        }
 
        String ORESESTA = entity.getORESESTA();
        if (ORESESTA != null) {
            stmt.bindString(30, ORESESTA);
        }
 
        String TIPODOCU = entity.getTIPODOCU();
        if (TIPODOCU != null) {
            stmt.bindString(31, TIPODOCU);
        }
 
        String CAUSLEGA = entity.getCAUSLEGA();
        if (CAUSLEGA != null) {
            stmt.bindString(32, CAUSLEGA);
        }
 
        String MOTILEGA = entity.getMOTILEGA();
        if (MOTILEGA != null) {
            stmt.bindString(33, MOTILEGA);
        }
 
        String CONTCODI = entity.getCONTCODI();
        if (CONTCODI != null) {
            stmt.bindString(34, CONTCODI);
        }
 
        String CONTNOMB = entity.getCONTNOMB();
        if (CONTNOMB != null) {
            stmt.bindString(35, CONTNOMB);
        }
 
        String CONCCICL = entity.getCONCCICL();
        if (CONCCICL != null) {
            stmt.bindString(36, CONCCICL);
        }
 
        String CONTDIRE = entity.getCONTDIRE();
        if (CONTDIRE != null) {
            stmt.bindString(37, CONTDIRE);
        }
 
        String CONTBARR = entity.getCONTBARR();
        if (CONTBARR != null) {
            stmt.bindString(38, CONTBARR);
        }
 
        String CONTTEFI = entity.getCONTTEFI();
        if (CONTTEFI != null) {
            stmt.bindString(39, CONTTEFI);
        }
 
        String CONTTECE = entity.getCONTTECE();
        if (CONTTECE != null) {
            stmt.bindString(40, CONTTECE);
        }
 
        String CONTRULE = entity.getCONTRULE();
        if (CONTRULE != null) {
            stmt.bindString(41, CONTRULE);
        }
 
        String VALOBARR = entity.getVALOBARR();
        if (VALOBARR != null) {
            stmt.bindString(42, VALOBARR);
        }
 
        String DANOPURE = entity.getDANOPURE();
        if (DANOPURE != null) {
            stmt.bindString(43, DANOPURE);
        }
 
        String DANOLATI = entity.getDANOLATI();
        if (DANOLATI != null) {
            stmt.bindString(44, DANOLATI);
        }
 
        String DANOLONG = entity.getDANOLONG();
        if (DANOLONG != null) {
            stmt.bindString(45, DANOLONG);
        }
 
        String DANOALTI = entity.getDANOALTI();
        if (DANOALTI != null) {
            stmt.bindString(46, DANOALTI);
        }
 
        String CAUSDESC = entity.getCAUSDESC();
        if (CAUSDESC != null) {
            stmt.bindString(47, CAUSDESC);
        }
 
        String ESTADO = entity.getESTADO();
        if (ESTADO != null) {
            stmt.bindString(48, ESTADO);
        }
 
        String Descargado = entity.getDescargado();
        if (Descargado != null) {
            stmt.bindString(49, Descargado);
        }
    }

    @Override
    protected void attachEntity(Gro_orden entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gro_orden readEntity(Cursor cursor, int offset) {
        Gro_orden entity = new Gro_orden( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ORDECONS
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ORDEORAM
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ORDECONT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ORDECAUS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ORDETIDO
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ORDENUDO
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ORDEPADR
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ORDEFIEJ
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ORDEFFEJ
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ORDEFEEJ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ORDEFEAS
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ORDEFELE
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ORDEVALU
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ORDEUNOP
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ORDETITR
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ORDECALE
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ORDEMOLE
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ORDEOBSE
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ORDEEFEC
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ORDETERM
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // ORDELATI
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ORDELONG
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ORDEALTI
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // ORDEESTA
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ORDEUSCR
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ORDEFECR
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // UNOPNOMB
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // TITRDESC
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // ORESESTA
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // TIPODOCU
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // CAUSLEGA
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // MOTILEGA
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // CONTCODI
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // CONTNOMB
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // CONCCICL
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // CONTDIRE
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // CONTBARR
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // CONTTEFI
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // CONTTECE
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // CONTRULE
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // VALOBARR
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // DANOPURE
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // DANOLATI
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // DANOLONG
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // DANOALTI
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // CAUSDESC
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // ESTADO
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48) // Descargado
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gro_orden entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setORDECONS(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setORDEORAM(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setORDECONT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setORDECAUS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setORDETIDO(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setORDENUDO(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setORDEPADR(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setORDEFIEJ(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setORDEFFEJ(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setORDEFEEJ(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setORDEFEAS(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setORDEFELE(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setORDEVALU(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setORDEUNOP(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setORDETITR(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setORDECALE(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setORDEMOLE(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setORDEOBSE(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setORDEEFEC(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setORDETERM(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setORDELATI(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setORDELONG(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setORDEALTI(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setORDEESTA(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setORDEUSCR(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setORDEFECR(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUNOPNOMB(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setTITRDESC(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setORESESTA(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setTIPODOCU(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCAUSLEGA(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMOTILEGA(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setCONTCODI(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCONTNOMB(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setCONCCICL(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setCONTDIRE(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setCONTBARR(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setCONTTEFI(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setCONTTECE(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setCONTRULE(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setVALOBARR(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setDANOPURE(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setDANOLATI(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setDANOLONG(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setDANOALTI(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setCAUSDESC(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setESTADO(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setDescargado(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gro_orden entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gro_orden entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

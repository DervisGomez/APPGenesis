package org.app.appgenesis.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.appgenesis.dao.Comentario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMENTARIO.
*/
public class ComentarioDao extends AbstractDao<Comentario, Long> {

    public static final String TABLENAME = "COMENTARIO";

    /**
     * Properties of entity Comentario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Comecons = new Property(1, String.class, "comecons", false, "COMECONS");
        public final static Property Comedesc = new Property(2, String.class, "comedesc", false, "COMEDESC");
        public final static Property Comedano = new Property(3, String.class, "comedano", false, "COMEDANO");
        public final static Property Comeorde = new Property(4, String.class, "comeorde", false, "COMEORDE");
        public final static Property Comesoli = new Property(5, String.class, "comesoli", false, "COMESOLI");
        public final static Property Comequej = new Property(6, String.class, "comequej", false, "COMEQUEJ");
        public final static Property Comerevi = new Property(7, String.class, "comerevi", false, "COMEREVI");
        public final static Property Comeuscr = new Property(8, String.class, "comeuscr", false, "COMEUSCR");
        public final static Property Comefecr = new Property(9, String.class, "comefecr", false, "COMEFECR");
        public final static Property Comeesta = new Property(10, String.class, "comeesta", false, "COMEESTA");
        public final static Property IdOrden = new Property(11, Long.class, "idOrden", false, "ID_ORDEN");
    };

    private Query<Comentario> gro_orden_ComentarioQuery;

    public ComentarioDao(DaoConfig config) {
        super(config);
    }
    
    public ComentarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMENTARIO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'COMECONS' TEXT," + // 1: comecons
                "'COMEDESC' TEXT," + // 2: comedesc
                "'COMEDANO' TEXT," + // 3: comedano
                "'COMEORDE' TEXT," + // 4: comeorde
                "'COMESOLI' TEXT," + // 5: comesoli
                "'COMEQUEJ' TEXT," + // 6: comequej
                "'COMEREVI' TEXT," + // 7: comerevi
                "'COMEUSCR' TEXT," + // 8: comeuscr
                "'COMEFECR' TEXT," + // 9: comefecr
                "'COMEESTA' TEXT," + // 10: comeesta
                "'ID_ORDEN' INTEGER);"); // 11: idOrden
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMENTARIO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comentario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String comecons = entity.getComecons();
        if (comecons != null) {
            stmt.bindString(2, comecons);
        }
 
        String comedesc = entity.getComedesc();
        if (comedesc != null) {
            stmt.bindString(3, comedesc);
        }
 
        String comedano = entity.getComedano();
        if (comedano != null) {
            stmt.bindString(4, comedano);
        }
 
        String comeorde = entity.getComeorde();
        if (comeorde != null) {
            stmt.bindString(5, comeorde);
        }
 
        String comesoli = entity.getComesoli();
        if (comesoli != null) {
            stmt.bindString(6, comesoli);
        }
 
        String comequej = entity.getComequej();
        if (comequej != null) {
            stmt.bindString(7, comequej);
        }
 
        String comerevi = entity.getComerevi();
        if (comerevi != null) {
            stmt.bindString(8, comerevi);
        }
 
        String comeuscr = entity.getComeuscr();
        if (comeuscr != null) {
            stmt.bindString(9, comeuscr);
        }
 
        String comefecr = entity.getComefecr();
        if (comefecr != null) {
            stmt.bindString(10, comefecr);
        }
 
        String comeesta = entity.getComeesta();
        if (comeesta != null) {
            stmt.bindString(11, comeesta);
        }
 
        Long idOrden = entity.getIdOrden();
        if (idOrden != null) {
            stmt.bindLong(12, idOrden);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Comentario readEntity(Cursor cursor, int offset) {
        Comentario entity = new Comentario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // comecons
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comedesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comedano
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comeorde
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // comesoli
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // comequej
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // comerevi
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // comeuscr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // comefecr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // comeesta
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // idOrden
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Comentario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComecons(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComedesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComedano(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComeorde(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComesoli(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setComequej(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComerevi(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setComeuscr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComefecr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComeesta(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIdOrden(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Comentario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Comentario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "comentario" to-many relationship of Gro_orden. */
    public List<Comentario> _queryGro_orden_Comentario(Long idOrden) {
        synchronized (this) {
            if (gro_orden_ComentarioQuery == null) {
                QueryBuilder<Comentario> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdOrden.eq(null));
                gro_orden_ComentarioQuery = queryBuilder.build();
            }
        }
        Query<Comentario> query = gro_orden_ComentarioQuery.forCurrentThread();
        query.setParameter(0, idOrden);
        return query.list();
    }

}

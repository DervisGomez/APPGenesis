package org.app.appgenesis.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.appgenesis.dao.OrdePers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDE_PERS.
*/
public class OrdePersDao extends AbstractDao<OrdePers, Long> {

    public static final String TABLENAME = "ORDE_PERS";

    /**
     * Properties of entity OrdePers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdPersona = new Property(1, Long.class, "idPersona", false, "ID_PERSONA");
        public final static Property IdOrden = new Property(2, Long.class, "idOrden", false, "ID_ORDEN");
    };

    private Query<OrdePers> persona_OrdePersQuery;
    private Query<OrdePers> gro_orden_OrdePersQuery;

    public OrdePersDao(DaoConfig config) {
        super(config);
    }
    
    public OrdePersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDE_PERS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_PERSONA' INTEGER," + // 1: idPersona
                "'ID_ORDEN' INTEGER);"); // 2: idOrden
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDE_PERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrdePers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long idPersona = entity.getIdPersona();
        if (idPersona != null) {
            stmt.bindLong(2, idPersona);
        }
 
        Long idOrden = entity.getIdOrden();
        if (idOrden != null) {
            stmt.bindLong(3, idOrden);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrdePers readEntity(Cursor cursor, int offset) {
        OrdePers entity = new OrdePers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idPersona
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // idOrden
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrdePers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPersona(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdOrden(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrdePers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrdePers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ordePers" to-many relationship of Persona. */
    public List<OrdePers> _queryPersona_OrdePers(Long idPersona) {
        synchronized (this) {
            if (persona_OrdePersQuery == null) {
                QueryBuilder<OrdePers> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdPersona.eq(null));
                persona_OrdePersQuery = queryBuilder.build();
            }
        }
        Query<OrdePers> query = persona_OrdePersQuery.forCurrentThread();
        query.setParameter(0, idPersona);
        return query.list();
    }

    /** Internal query to resolve the "ordePers" to-many relationship of Gro_orden. */
    public List<OrdePers> _queryGro_orden_OrdePers(Long idOrden) {
        synchronized (this) {
            if (gro_orden_OrdePersQuery == null) {
                QueryBuilder<OrdePers> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdOrden.eq(null));
                gro_orden_OrdePersQuery = queryBuilder.build();
            }
        }
        Query<OrdePers> query = gro_orden_OrdePersQuery.forCurrentThread();
        query.setParameter(0, idOrden);
        return query.list();
    }

}

package org.app.appgenesis.dao;

import java.util.List;
import org.app.appgenesis.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GRO_ORDEN.
 */
public class Gro_orden {

    private Long id;
    private Integer ORDECONS;
    private String ORDEORAM;
    private String ORDECONT;
    private String ORDECAUS;
    private String ORDETIDO;
    private String ORDENUDO;
    private String ORDEPADR;
    private String ORDEFIEJ;
    private String ORDEFFEJ;
    private String ORDEFEEJ;
    private String ORDEFEAS;
    private String ORDEFELE;
    private String ORDEVALU;
    private String ORDEUNOP;
    private String ORDETITR;
    private String ORDECALE;
    private String ORDEMOLE;
    private String ORDEOBSE;
    private String ORDEEFEC;
    private String ORDETERM;
    private String ORDELATI;
    private String ORDELONG;
    private String ORDEALTI;
    private String ORDEESTA;
    private String ORDEUSCR;
    private String ORDEFECR;
    private String UNOPNOMB;
    private String TITRDESC;
    private String ORESESTA;
    private String TIPODOCU;
    private String CAUSLEGA;
    private String MOTILEGA;
    private String CONTCODI;
    private String CONTNOMB;
    private String CONCCICL;
    private String CONTDIRE;
    private String CONTBARR;
    private String CONTTEFI;
    private String CONTTECE;
    private String CONTRULE;
    private String VALOBARR;
    private String DANOPURE;
    private String DANOLATI;
    private String DANOLONG;
    private String DANOALTI;
    private String CAUSDESC;
    private String ESTADO;
    private String Descargado;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient Gro_ordenDao myDao;

    private List<OrdePers> ordePers;
    private List<OrdeMate> ordeMate;
    private List<Material> material;
    private List<Firma> firma;
    private List<Dibujo> Dibujo;
    private List<Comentario> comentario;
    private List<Fotografia> fotografia;
    private List<Gop_ordeatri> atributo;
    private List<Ordecost> ordecost;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Gro_orden() {
    }

    public Gro_orden(Long id) {
        this.id = id;
    }

    public Gro_orden(Long id, Integer ORDECONS, String ORDEORAM, String ORDECONT, String ORDECAUS, String ORDETIDO, String ORDENUDO, String ORDEPADR, String ORDEFIEJ, String ORDEFFEJ, String ORDEFEEJ, String ORDEFEAS, String ORDEFELE, String ORDEVALU, String ORDEUNOP, String ORDETITR, String ORDECALE, String ORDEMOLE, String ORDEOBSE, String ORDEEFEC, String ORDETERM, String ORDELATI, String ORDELONG, String ORDEALTI, String ORDEESTA, String ORDEUSCR, String ORDEFECR, String UNOPNOMB, String TITRDESC, String ORESESTA, String TIPODOCU, String CAUSLEGA, String MOTILEGA, String CONTCODI, String CONTNOMB, String CONCCICL, String CONTDIRE, String CONTBARR, String CONTTEFI, String CONTTECE, String CONTRULE, String VALOBARR, String DANOPURE, String DANOLATI, String DANOLONG, String DANOALTI, String CAUSDESC, String ESTADO, String Descargado) {
        this.id = id;
        this.ORDECONS = ORDECONS;
        this.ORDEORAM = ORDEORAM;
        this.ORDECONT = ORDECONT;
        this.ORDECAUS = ORDECAUS;
        this.ORDETIDO = ORDETIDO;
        this.ORDENUDO = ORDENUDO;
        this.ORDEPADR = ORDEPADR;
        this.ORDEFIEJ = ORDEFIEJ;
        this.ORDEFFEJ = ORDEFFEJ;
        this.ORDEFEEJ = ORDEFEEJ;
        this.ORDEFEAS = ORDEFEAS;
        this.ORDEFELE = ORDEFELE;
        this.ORDEVALU = ORDEVALU;
        this.ORDEUNOP = ORDEUNOP;
        this.ORDETITR = ORDETITR;
        this.ORDECALE = ORDECALE;
        this.ORDEMOLE = ORDEMOLE;
        this.ORDEOBSE = ORDEOBSE;
        this.ORDEEFEC = ORDEEFEC;
        this.ORDETERM = ORDETERM;
        this.ORDELATI = ORDELATI;
        this.ORDELONG = ORDELONG;
        this.ORDEALTI = ORDEALTI;
        this.ORDEESTA = ORDEESTA;
        this.ORDEUSCR = ORDEUSCR;
        this.ORDEFECR = ORDEFECR;
        this.UNOPNOMB = UNOPNOMB;
        this.TITRDESC = TITRDESC;
        this.ORESESTA = ORESESTA;
        this.TIPODOCU = TIPODOCU;
        this.CAUSLEGA = CAUSLEGA;
        this.MOTILEGA = MOTILEGA;
        this.CONTCODI = CONTCODI;
        this.CONTNOMB = CONTNOMB;
        this.CONCCICL = CONCCICL;
        this.CONTDIRE = CONTDIRE;
        this.CONTBARR = CONTBARR;
        this.CONTTEFI = CONTTEFI;
        this.CONTTECE = CONTTECE;
        this.CONTRULE = CONTRULE;
        this.VALOBARR = VALOBARR;
        this.DANOPURE = DANOPURE;
        this.DANOLATI = DANOLATI;
        this.DANOLONG = DANOLONG;
        this.DANOALTI = DANOALTI;
        this.CAUSDESC = CAUSDESC;
        this.ESTADO = ESTADO;
        this.Descargado = Descargado;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGro_ordenDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getORDECONS() {
        return ORDECONS;
    }

    public void setORDECONS(Integer ORDECONS) {
        this.ORDECONS = ORDECONS;
    }

    public String getORDEORAM() {
        return ORDEORAM;
    }

    public void setORDEORAM(String ORDEORAM) {
        this.ORDEORAM = ORDEORAM;
    }

    public String getORDECONT() {
        return ORDECONT;
    }

    public void setORDECONT(String ORDECONT) {
        this.ORDECONT = ORDECONT;
    }

    public String getORDECAUS() {
        return ORDECAUS;
    }

    public void setORDECAUS(String ORDECAUS) {
        this.ORDECAUS = ORDECAUS;
    }

    public String getORDETIDO() {
        return ORDETIDO;
    }

    public void setORDETIDO(String ORDETIDO) {
        this.ORDETIDO = ORDETIDO;
    }

    public String getORDENUDO() {
        return ORDENUDO;
    }

    public void setORDENUDO(String ORDENUDO) {
        this.ORDENUDO = ORDENUDO;
    }

    public String getORDEPADR() {
        return ORDEPADR;
    }

    public void setORDEPADR(String ORDEPADR) {
        this.ORDEPADR = ORDEPADR;
    }

    public String getORDEFIEJ() {
        return ORDEFIEJ;
    }

    public void setORDEFIEJ(String ORDEFIEJ) {
        this.ORDEFIEJ = ORDEFIEJ;
    }

    public String getORDEFFEJ() {
        return ORDEFFEJ;
    }

    public void setORDEFFEJ(String ORDEFFEJ) {
        this.ORDEFFEJ = ORDEFFEJ;
    }

    public String getORDEFEEJ() {
        return ORDEFEEJ;
    }

    public void setORDEFEEJ(String ORDEFEEJ) {
        this.ORDEFEEJ = ORDEFEEJ;
    }

    public String getORDEFEAS() {
        return ORDEFEAS;
    }

    public void setORDEFEAS(String ORDEFEAS) {
        this.ORDEFEAS = ORDEFEAS;
    }

    public String getORDEFELE() {
        return ORDEFELE;
    }

    public void setORDEFELE(String ORDEFELE) {
        this.ORDEFELE = ORDEFELE;
    }

    public String getORDEVALU() {
        return ORDEVALU;
    }

    public void setORDEVALU(String ORDEVALU) {
        this.ORDEVALU = ORDEVALU;
    }

    public String getORDEUNOP() {
        return ORDEUNOP;
    }

    public void setORDEUNOP(String ORDEUNOP) {
        this.ORDEUNOP = ORDEUNOP;
    }

    public String getORDETITR() {
        return ORDETITR;
    }

    public void setORDETITR(String ORDETITR) {
        this.ORDETITR = ORDETITR;
    }

    public String getORDECALE() {
        return ORDECALE;
    }

    public void setORDECALE(String ORDECALE) {
        this.ORDECALE = ORDECALE;
    }

    public String getORDEMOLE() {
        return ORDEMOLE;
    }

    public void setORDEMOLE(String ORDEMOLE) {
        this.ORDEMOLE = ORDEMOLE;
    }

    public String getORDEOBSE() {
        return ORDEOBSE;
    }

    public void setORDEOBSE(String ORDEOBSE) {
        this.ORDEOBSE = ORDEOBSE;
    }

    public String getORDEEFEC() {
        return ORDEEFEC;
    }

    public void setORDEEFEC(String ORDEEFEC) {
        this.ORDEEFEC = ORDEEFEC;
    }

    public String getORDETERM() {
        return ORDETERM;
    }

    public void setORDETERM(String ORDETERM) {
        this.ORDETERM = ORDETERM;
    }

    public String getORDELATI() {
        return ORDELATI;
    }

    public void setORDELATI(String ORDELATI) {
        this.ORDELATI = ORDELATI;
    }

    public String getORDELONG() {
        return ORDELONG;
    }

    public void setORDELONG(String ORDELONG) {
        this.ORDELONG = ORDELONG;
    }

    public String getORDEALTI() {
        return ORDEALTI;
    }

    public void setORDEALTI(String ORDEALTI) {
        this.ORDEALTI = ORDEALTI;
    }

    public String getORDEESTA() {
        return ORDEESTA;
    }

    public void setORDEESTA(String ORDEESTA) {
        this.ORDEESTA = ORDEESTA;
    }

    public String getORDEUSCR() {
        return ORDEUSCR;
    }

    public void setORDEUSCR(String ORDEUSCR) {
        this.ORDEUSCR = ORDEUSCR;
    }

    public String getORDEFECR() {
        return ORDEFECR;
    }

    public void setORDEFECR(String ORDEFECR) {
        this.ORDEFECR = ORDEFECR;
    }

    public String getUNOPNOMB() {
        return UNOPNOMB;
    }

    public void setUNOPNOMB(String UNOPNOMB) {
        this.UNOPNOMB = UNOPNOMB;
    }

    public String getTITRDESC() {
        return TITRDESC;
    }

    public void setTITRDESC(String TITRDESC) {
        this.TITRDESC = TITRDESC;
    }

    public String getORESESTA() {
        return ORESESTA;
    }

    public void setORESESTA(String ORESESTA) {
        this.ORESESTA = ORESESTA;
    }

    public String getTIPODOCU() {
        return TIPODOCU;
    }

    public void setTIPODOCU(String TIPODOCU) {
        this.TIPODOCU = TIPODOCU;
    }

    public String getCAUSLEGA() {
        return CAUSLEGA;
    }

    public void setCAUSLEGA(String CAUSLEGA) {
        this.CAUSLEGA = CAUSLEGA;
    }

    public String getMOTILEGA() {
        return MOTILEGA;
    }

    public void setMOTILEGA(String MOTILEGA) {
        this.MOTILEGA = MOTILEGA;
    }

    public String getCONTCODI() {
        return CONTCODI;
    }

    public void setCONTCODI(String CONTCODI) {
        this.CONTCODI = CONTCODI;
    }

    public String getCONTNOMB() {
        return CONTNOMB;
    }

    public void setCONTNOMB(String CONTNOMB) {
        this.CONTNOMB = CONTNOMB;
    }

    public String getCONCCICL() {
        return CONCCICL;
    }

    public void setCONCCICL(String CONCCICL) {
        this.CONCCICL = CONCCICL;
    }

    public String getCONTDIRE() {
        return CONTDIRE;
    }

    public void setCONTDIRE(String CONTDIRE) {
        this.CONTDIRE = CONTDIRE;
    }

    public String getCONTBARR() {
        return CONTBARR;
    }

    public void setCONTBARR(String CONTBARR) {
        this.CONTBARR = CONTBARR;
    }

    public String getCONTTEFI() {
        return CONTTEFI;
    }

    public void setCONTTEFI(String CONTTEFI) {
        this.CONTTEFI = CONTTEFI;
    }

    public String getCONTTECE() {
        return CONTTECE;
    }

    public void setCONTTECE(String CONTTECE) {
        this.CONTTECE = CONTTECE;
    }

    public String getCONTRULE() {
        return CONTRULE;
    }

    public void setCONTRULE(String CONTRULE) {
        this.CONTRULE = CONTRULE;
    }

    public String getVALOBARR() {
        return VALOBARR;
    }

    public void setVALOBARR(String VALOBARR) {
        this.VALOBARR = VALOBARR;
    }

    public String getDANOPURE() {
        return DANOPURE;
    }

    public void setDANOPURE(String DANOPURE) {
        this.DANOPURE = DANOPURE;
    }

    public String getDANOLATI() {
        return DANOLATI;
    }

    public void setDANOLATI(String DANOLATI) {
        this.DANOLATI = DANOLATI;
    }

    public String getDANOLONG() {
        return DANOLONG;
    }

    public void setDANOLONG(String DANOLONG) {
        this.DANOLONG = DANOLONG;
    }

    public String getDANOALTI() {
        return DANOALTI;
    }

    public void setDANOALTI(String DANOALTI) {
        this.DANOALTI = DANOALTI;
    }

    public String getCAUSDESC() {
        return CAUSDESC;
    }

    public void setCAUSDESC(String CAUSDESC) {
        this.CAUSDESC = CAUSDESC;
    }

    public String getESTADO() {
        return ESTADO;
    }

    public void setESTADO(String ESTADO) {
        this.ESTADO = ESTADO;
    }

    public String getDescargado() {
        return Descargado;
    }

    public void setDescargado(String Descargado) {
        this.Descargado = Descargado;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OrdePers> getOrdePers() {
        if (ordePers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrdePersDao targetDao = daoSession.getOrdePersDao();
            List<OrdePers> ordePersNew = targetDao._queryGro_orden_OrdePers(id);
            synchronized (this) {
                if(ordePers == null) {
                    ordePers = ordePersNew;
                }
            }
        }
        return ordePers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrdePers() {
        ordePers = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OrdeMate> getOrdeMate() {
        if (ordeMate == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrdeMateDao targetDao = daoSession.getOrdeMateDao();
            List<OrdeMate> ordeMateNew = targetDao._queryGro_orden_OrdeMate(id);
            synchronized (this) {
                if(ordeMate == null) {
                    ordeMate = ordeMateNew;
                }
            }
        }
        return ordeMate;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrdeMate() {
        ordeMate = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Material> getMaterial() {
        if (material == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MaterialDao targetDao = daoSession.getMaterialDao();
            List<Material> materialNew = targetDao._queryGro_orden_Material(id);
            synchronized (this) {
                if(material == null) {
                    material = materialNew;
                }
            }
        }
        return material;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMaterial() {
        material = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Firma> getFirma() {
        if (firma == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FirmaDao targetDao = daoSession.getFirmaDao();
            List<Firma> firmaNew = targetDao._queryGro_orden_Firma(id);
            synchronized (this) {
                if(firma == null) {
                    firma = firmaNew;
                }
            }
        }
        return firma;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFirma() {
        firma = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Dibujo> getDibujo() {
        if (Dibujo == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DibujoDao targetDao = daoSession.getDibujoDao();
            List<Dibujo> DibujoNew = targetDao._queryGro_orden_Dibujo(id);
            synchronized (this) {
                if(Dibujo == null) {
                    Dibujo = DibujoNew;
                }
            }
        }
        return Dibujo;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDibujo() {
        Dibujo = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Comentario> getComentario() {
        if (comentario == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ComentarioDao targetDao = daoSession.getComentarioDao();
            List<Comentario> comentarioNew = targetDao._queryGro_orden_Comentario(id);
            synchronized (this) {
                if(comentario == null) {
                    comentario = comentarioNew;
                }
            }
        }
        return comentario;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComentario() {
        comentario = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Fotografia> getFotografia() {
        if (fotografia == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FotografiaDao targetDao = daoSession.getFotografiaDao();
            List<Fotografia> fotografiaNew = targetDao._queryGro_orden_Fotografia(id);
            synchronized (this) {
                if(fotografia == null) {
                    fotografia = fotografiaNew;
                }
            }
        }
        return fotografia;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFotografia() {
        fotografia = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Gop_ordeatri> getAtributo() {
        if (atributo == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Gop_ordeatriDao targetDao = daoSession.getGop_ordeatriDao();
            List<Gop_ordeatri> atributoNew = targetDao._queryGro_orden_Atributo(id);
            synchronized (this) {
                if(atributo == null) {
                    atributo = atributoNew;
                }
            }
        }
        return atributo;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAtributo() {
        atributo = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Ordecost> getOrdecost() {
        if (ordecost == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrdecostDao targetDao = daoSession.getOrdecostDao();
            List<Ordecost> ordecostNew = targetDao._queryGro_orden_Ordecost(id);
            synchronized (this) {
                if(ordecost == null) {
                    ordecost = ordecostNew;
                }
            }
        }
        return ordecost;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrdecost() {
        ordecost = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}

package org.app.appgenesis.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.appgenesis.dao.Dibujo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DIBUJO.
*/
public class DibujoDao extends AbstractDao<Dibujo, Long> {

    public static final String TABLENAME = "DIBUJO";

    /**
     * Properties of entity Dibujo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property X = new Property(1, Float.class, "x", false, "X");
        public final static Property Y = new Property(2, Float.class, "y", false, "Y");
        public final static Property Accion = new Property(3, String.class, "accion", false, "ACCION");
        public final static Property IdFirma = new Property(4, Long.class, "idFirma", false, "ID_FIRMA");
    };

    private Query<Dibujo> gro_orden_DibujoQuery;

    public DibujoDao(DaoConfig config) {
        super(config);
    }
    
    public DibujoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DIBUJO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'X' REAL," + // 1: x
                "'Y' REAL," + // 2: y
                "'ACCION' TEXT," + // 3: accion
                "'ID_FIRMA' INTEGER);"); // 4: idFirma
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DIBUJO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Dibujo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float x = entity.getX();
        if (x != null) {
            stmt.bindDouble(2, x);
        }
 
        Float y = entity.getY();
        if (y != null) {
            stmt.bindDouble(3, y);
        }
 
        String accion = entity.getAccion();
        if (accion != null) {
            stmt.bindString(4, accion);
        }
 
        Long idFirma = entity.getIdFirma();
        if (idFirma != null) {
            stmt.bindLong(5, idFirma);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Dibujo readEntity(Cursor cursor, int offset) {
        Dibujo entity = new Dibujo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // x
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // y
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accion
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // idFirma
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dibujo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setX(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setY(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setAccion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdFirma(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Dibujo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Dibujo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Dibujo" to-many relationship of Gro_orden. */
    public List<Dibujo> _queryGro_orden_Dibujo(Long idFirma) {
        synchronized (this) {
            if (gro_orden_DibujoQuery == null) {
                QueryBuilder<Dibujo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdFirma.eq(null));
                gro_orden_DibujoQuery = queryBuilder.build();
            }
        }
        Query<Dibujo> query = gro_orden_DibujoQuery.forCurrentThread();
        query.setParameter(0, idFirma);
        return query.list();
    }

}

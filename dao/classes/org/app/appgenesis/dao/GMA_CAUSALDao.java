package org.app.appgenesis.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.appgenesis.dao.GMA_CAUSAL;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GMA__CAUSAL.
*/
public class GMA_CAUSALDao extends AbstractDao<GMA_CAUSAL, Long> {

    public static final String TABLENAME = "GMA__CAUSAL";

    /**
     * Properties of entity GMA_CAUSAL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Causcons = new Property(1, String.class, "causcons", false, "CAUSCONS");
        public final static Property Causdesc = new Property(2, String.class, "causdesc", false, "CAUSDESC");
        public final static Property Caustipo = new Property(3, String.class, "caustipo", false, "CAUSTIPO");
        public final static Property Causesta = new Property(4, String.class, "causesta", false, "CAUSESTA");
        public final static Property Caususcr = new Property(5, String.class, "caususcr", false, "CAUSUSCR");
        public final static Property Causfecr = new Property(6, String.class, "causfecr", false, "CAUSFECR");
    };


    public GMA_CAUSALDao(DaoConfig config) {
        super(config);
    }
    
    public GMA_CAUSALDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GMA__CAUSAL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CAUSCONS' TEXT," + // 1: causcons
                "'CAUSDESC' TEXT," + // 2: causdesc
                "'CAUSTIPO' TEXT," + // 3: caustipo
                "'CAUSESTA' TEXT," + // 4: causesta
                "'CAUSUSCR' TEXT," + // 5: caususcr
                "'CAUSFECR' TEXT);"); // 6: causfecr
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GMA__CAUSAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GMA_CAUSAL entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String causcons = entity.getCauscons();
        if (causcons != null) {
            stmt.bindString(2, causcons);
        }
 
        String causdesc = entity.getCausdesc();
        if (causdesc != null) {
            stmt.bindString(3, causdesc);
        }
 
        String caustipo = entity.getCaustipo();
        if (caustipo != null) {
            stmt.bindString(4, caustipo);
        }
 
        String causesta = entity.getCausesta();
        if (causesta != null) {
            stmt.bindString(5, causesta);
        }
 
        String caususcr = entity.getCaususcr();
        if (caususcr != null) {
            stmt.bindString(6, caususcr);
        }
 
        String causfecr = entity.getCausfecr();
        if (causfecr != null) {
            stmt.bindString(7, causfecr);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GMA_CAUSAL readEntity(Cursor cursor, int offset) {
        GMA_CAUSAL entity = new GMA_CAUSAL( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // causcons
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // causdesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // caustipo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // causesta
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // caususcr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // causfecr
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GMA_CAUSAL entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCauscons(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCausdesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCaustipo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCausesta(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCaususcr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCausfecr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GMA_CAUSAL entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GMA_CAUSAL entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

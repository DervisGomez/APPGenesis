package org.app.appgenesis.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.appgenesis.dao.Material;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MATERIAL.
*/
public class MaterialDao extends AbstractDao<Material, Long> {

    public static final String TABLENAME = "MATERIAL";

    /**
     * Properties of entity Material.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Matecons = new Property(1, Integer.class, "matecons", false, "MATECONS");
        public final static Property Matecodi = new Property(2, Integer.class, "matecodi", false, "MATECODI");
        public final static Property Matedesc = new Property(3, String.class, "matedesc", false, "MATEDESC");
        public final static Property Mateclas = new Property(4, Integer.class, "mateclas", false, "MATECLAS");
        public final static Property Mateunme = new Property(5, Integer.class, "mateunme", false, "MATEUNME");
        public final static Property Mategara = new Property(6, String.class, "mategara", false, "MATEGARA");
        public final static Property Mateexis = new Property(7, String.class, "mateexis", false, "MATEEXIS");
        public final static Property Matecost = new Property(8, String.class, "matecost", false, "MATECOST");
        public final static Property Mateesta = new Property(9, Integer.class, "mateesta", false, "MATEESTA");
        public final static Property Mateuscr = new Property(10, String.class, "mateuscr", false, "MATEUSCR");
        public final static Property Matefecr = new Property(11, String.class, "matefecr", false, "MATEFECR");
        public final static Property Mattmate = new Property(12, String.class, "mattmate", false, "MATTMATE");
        public final static Property IdOrden = new Property(13, Long.class, "idOrden", false, "ID_ORDEN");
    };

    private DaoSession daoSession;

    private Query<Material> gro_orden_MaterialQuery;

    public MaterialDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MATERIAL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MATECONS' INTEGER," + // 1: matecons
                "'MATECODI' INTEGER," + // 2: matecodi
                "'MATEDESC' TEXT," + // 3: matedesc
                "'MATECLAS' INTEGER," + // 4: mateclas
                "'MATEUNME' INTEGER," + // 5: mateunme
                "'MATEGARA' TEXT," + // 6: mategara
                "'MATEEXIS' TEXT," + // 7: mateexis
                "'MATECOST' TEXT," + // 8: matecost
                "'MATEESTA' INTEGER," + // 9: mateesta
                "'MATEUSCR' TEXT," + // 10: mateuscr
                "'MATEFECR' TEXT," + // 11: matefecr
                "'MATTMATE' TEXT," + // 12: mattmate
                "'ID_ORDEN' INTEGER);"); // 13: idOrden
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MATERIAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Material entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer matecons = entity.getMatecons();
        if (matecons != null) {
            stmt.bindLong(2, matecons);
        }
 
        Integer matecodi = entity.getMatecodi();
        if (matecodi != null) {
            stmt.bindLong(3, matecodi);
        }
 
        String matedesc = entity.getMatedesc();
        if (matedesc != null) {
            stmt.bindString(4, matedesc);
        }
 
        Integer mateclas = entity.getMateclas();
        if (mateclas != null) {
            stmt.bindLong(5, mateclas);
        }
 
        Integer mateunme = entity.getMateunme();
        if (mateunme != null) {
            stmt.bindLong(6, mateunme);
        }
 
        String mategara = entity.getMategara();
        if (mategara != null) {
            stmt.bindString(7, mategara);
        }
 
        String mateexis = entity.getMateexis();
        if (mateexis != null) {
            stmt.bindString(8, mateexis);
        }
 
        String matecost = entity.getMatecost();
        if (matecost != null) {
            stmt.bindString(9, matecost);
        }
 
        Integer mateesta = entity.getMateesta();
        if (mateesta != null) {
            stmt.bindLong(10, mateesta);
        }
 
        String mateuscr = entity.getMateuscr();
        if (mateuscr != null) {
            stmt.bindString(11, mateuscr);
        }
 
        String matefecr = entity.getMatefecr();
        if (matefecr != null) {
            stmt.bindString(12, matefecr);
        }
 
        String mattmate = entity.getMattmate();
        if (mattmate != null) {
            stmt.bindString(13, mattmate);
        }
 
        Long idOrden = entity.getIdOrden();
        if (idOrden != null) {
            stmt.bindLong(14, idOrden);
        }
    }

    @Override
    protected void attachEntity(Material entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Material readEntity(Cursor cursor, int offset) {
        Material entity = new Material( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // matecons
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // matecodi
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // matedesc
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // mateclas
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // mateunme
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mategara
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mateexis
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // matecost
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // mateesta
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mateuscr
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // matefecr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mattmate
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // idOrden
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Material entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMatecons(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMatecodi(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMatedesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMateclas(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMateunme(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMategara(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMateexis(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMatecost(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMateesta(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMateuscr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMatefecr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMattmate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIdOrden(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Material entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Material entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "material" to-many relationship of Gro_orden. */
    public List<Material> _queryGro_orden_Material(Long idOrden) {
        synchronized (this) {
            if (gro_orden_MaterialQuery == null) {
                QueryBuilder<Material> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdOrden.eq(null));
                gro_orden_MaterialQuery = queryBuilder.build();
            }
        }
        Query<Material> query = gro_orden_MaterialQuery.forCurrentThread();
        query.setParameter(0, idOrden);
        return query.list();
    }

}

package org.app.appgenesis.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.app.appgenesis.dao.Gop_ordeatri;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GOP_ORDEATRI.
*/
public class Gop_ordeatriDao extends AbstractDao<Gop_ordeatri, Long> {

    public static final String TABLENAME = "GOP_ORDEATRI";

    /**
     * Properties of entity Gop_ordeatri.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Atricons = new Property(1, Long.class, "atricons", false, "ATRICONS");
        public final static Property Atridesc = new Property(2, String.class, "atridesc", false, "ATRIDESC");
        public final static Property Comp_extjs = new Property(3, String.class, "comp_extjs", false, "COMP_EXTJS");
        public final static Property Comp_android = new Property(4, String.class, "comp_android", false, "COMP_ANDROID");
        public final static Property Grupo = new Property(5, String.class, "grupo", false, "GRUPO");
        public final static Property Requerido = new Property(6, String.class, "requerido", false, "REQUERIDO");
        public final static Property Valores = new Property(7, String.class, "valores", false, "VALORES");
        public final static Property Valor = new Property(8, String.class, "valor", false, "VALOR");
        public final static Property Creacion = new Property(9, String.class, "creacion", false, "CREACION");
        public final static Property Usuario = new Property(10, String.class, "usuario", false, "USUARIO");
        public final static Property Respuesta = new Property(11, String.class, "respuesta", false, "RESPUESTA");
        public final static Property IdOrden = new Property(12, Long.class, "IdOrden", false, "ID_ORDEN");
    };

    private Query<Gop_ordeatri> gro_orden_AtributoQuery;

    public Gop_ordeatriDao(DaoConfig config) {
        super(config);
    }
    
    public Gop_ordeatriDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GOP_ORDEATRI' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ATRICONS' INTEGER," + // 1: atricons
                "'ATRIDESC' TEXT," + // 2: atridesc
                "'COMP_EXTJS' TEXT," + // 3: comp_extjs
                "'COMP_ANDROID' TEXT," + // 4: comp_android
                "'GRUPO' TEXT," + // 5: grupo
                "'REQUERIDO' TEXT," + // 6: requerido
                "'VALORES' TEXT," + // 7: valores
                "'VALOR' TEXT," + // 8: valor
                "'CREACION' TEXT," + // 9: creacion
                "'USUARIO' TEXT," + // 10: usuario
                "'RESPUESTA' TEXT," + // 11: respuesta
                "'ID_ORDEN' INTEGER);"); // 12: IdOrden
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GOP_ORDEATRI'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gop_ordeatri entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long atricons = entity.getAtricons();
        if (atricons != null) {
            stmt.bindLong(2, atricons);
        }
 
        String atridesc = entity.getAtridesc();
        if (atridesc != null) {
            stmt.bindString(3, atridesc);
        }
 
        String comp_extjs = entity.getComp_extjs();
        if (comp_extjs != null) {
            stmt.bindString(4, comp_extjs);
        }
 
        String comp_android = entity.getComp_android();
        if (comp_android != null) {
            stmt.bindString(5, comp_android);
        }
 
        String grupo = entity.getGrupo();
        if (grupo != null) {
            stmt.bindString(6, grupo);
        }
 
        String requerido = entity.getRequerido();
        if (requerido != null) {
            stmt.bindString(7, requerido);
        }
 
        String valores = entity.getValores();
        if (valores != null) {
            stmt.bindString(8, valores);
        }
 
        String valor = entity.getValor();
        if (valor != null) {
            stmt.bindString(9, valor);
        }
 
        String creacion = entity.getCreacion();
        if (creacion != null) {
            stmt.bindString(10, creacion);
        }
 
        String usuario = entity.getUsuario();
        if (usuario != null) {
            stmt.bindString(11, usuario);
        }
 
        String respuesta = entity.getRespuesta();
        if (respuesta != null) {
            stmt.bindString(12, respuesta);
        }
 
        Long IdOrden = entity.getIdOrden();
        if (IdOrden != null) {
            stmt.bindLong(13, IdOrden);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gop_ordeatri readEntity(Cursor cursor, int offset) {
        Gop_ordeatri entity = new Gop_ordeatri( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // atricons
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // atridesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comp_extjs
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comp_android
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // grupo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // requerido
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // valores
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // valor
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // creacion
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // usuario
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // respuesta
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // IdOrden
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gop_ordeatri entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAtricons(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAtridesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComp_extjs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComp_android(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGrupo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRequerido(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setValores(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setValor(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreacion(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUsuario(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRespuesta(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIdOrden(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gop_ordeatri entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gop_ordeatri entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "atributo" to-many relationship of Gro_orden. */
    public List<Gop_ordeatri> _queryGro_orden_Atributo(Long IdOrden) {
        synchronized (this) {
            if (gro_orden_AtributoQuery == null) {
                QueryBuilder<Gop_ordeatri> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdOrden.eq(null));
                gro_orden_AtributoQuery = queryBuilder.build();
            }
        }
        Query<Gop_ordeatri> query = gro_orden_AtributoQuery.forCurrentThread();
        query.setParameter(0, IdOrden);
        return query.list();
    }

}
